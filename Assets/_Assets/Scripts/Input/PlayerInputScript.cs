//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Assets/Scripts/Input/PlayerInputScript.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputScript: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputScript()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputScript"",
    ""maps"": [
        {
            ""name"": ""Gamepad"",
            ""id"": ""74bbf4d1-d6bd-4707-858b-dc645814aead"",
            ""actions"": [
                {
                    ""name"": ""Slap"",
                    ""type"": ""Button"",
                    ""id"": ""9ef1c25a-5e09-4f54-bf47-c617d3f93d17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5db4271-119d-4e30-a4ff-2d13d9b2f14d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""554d7966-4d36-4037-80be-a5f55e84fd15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48e9f9d6-55cf-4947-94f4-c9d520f86d98"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f97ca91d-22da-45d3-b787-09d70ed441c2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5648623a-8d85-4426-b951-414115009b73"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d482fdad-d346-42e6-8cb0-cfc077881490"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5d7a1587-bea2-4ff5-87f3-b12203fabb08"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bcc041c4-28fd-43a0-8868-173684bb7372"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a3ae99ba-3893-4bba-b3c6-81b0f95c55c9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard1"",
            ""id"": ""7430940f-6a37-4c05-8f21-f9ecb49e777c"",
            ""actions"": [
                {
                    ""name"": ""Slap"",
                    ""type"": ""Button"",
                    ""id"": ""e20a3a6a-e0ed-450c-887a-5c67b32e4d60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3fc874b2-b585-4c04-908c-2fbb6bafc45f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""a9c0302a-f4c0-4ce9-b53c-a784f003edb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c65d8211-5f65-479c-8ec2-cba0ba5d0e85"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8d96b9dd-7916-4ca1-b523-2274e1d66afc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""73382cc1-95f0-44d4-b3b7-39e80da5dd96"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""87df0d5e-ade2-432f-b187-17151e4926d8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3cfe0d4-13d9-4429-90b2-aaeb5beadeba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b95bbfb5-98c7-4121-abf9-f9162fd84fa5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d5610810-065a-4c3f-9b47-1b1cc21278e3"",
                    ""path"": ""<Keyboard>/rightAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard2"",
            ""id"": ""071c7a8f-7fd1-439c-8e96-f5da354a42a9"",
            ""actions"": [
                {
                    ""name"": ""Slap"",
                    ""type"": ""Button"",
                    ""id"": ""bc8c216e-c16d-4fcc-96bf-6bdefacf166a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c4f3610a-e403-4be7-8739-559fa4b95e9b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""fe6af8b4-2ada-48ed-95b5-0ae53afcaafd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea2fe207-8635-4e5c-8d8f-10b93845658e"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""11640c76-b3ae-4087-9e55-636aa2b08fe8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0db16caf-8e44-45d5-9f2a-e1a79b409b3e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5881e11-2a3f-4228-90cb-555329eeaa7d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""91249dde-feed-46a4-a52c-91c5d2d9263a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1335afe5-7bd4-4b20-9b87-2b3ce92ce7df"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aa21c8f4-0c18-433d-91aa-7f4b073e805f"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIKeyboard1"",
            ""id"": ""d508ef80-3060-4b7b-987d-c667057abe33"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a4e001e5-8868-42d7-b5c2-a51d4215c6e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""f3cdadef-b683-4846-895e-973899d0e7c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""fdceb46d-d883-421c-b6a9-1fcb58936afb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2695fdea-20a5-4e1f-ab17-ce1aa3097dac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""858f4ec3-3e2a-4cc4-a20c-65153cfeb757"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7891530e-9c6f-41b5-812f-7f84b7035363"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""64d9c27f-0f57-4d77-b421-a8e0ccd1ea9a"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4e9fdfe2-49db-46de-bcd5-dcc83cfca813"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f419961-5b57-45a6-b70e-79d8510c1ecb"",
                    ""path"": ""<Keyboard>/rightAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee16966b-63a4-4cde-b9ff-5476f796ab9d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIKeyboard2"",
            ""id"": ""f2230e1b-ee21-4794-accf-ca3c8cdf8aee"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11958a75-4a21-49c7-8703-2bd1d46f0dbf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""0b9a604d-dc79-4a76-bc89-24076016f6e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""b1a4bfef-8d5d-4ed1-8c5b-dad0952b538b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2f2031e0-db8d-4eaf-a3fa-f603ece9f5d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ebafa1ea-909d-489c-8757-2db9bc75bd6f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7b182eb-ef96-4041-8e6e-1dbf0612cb41"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c7dc0391-8e22-4308-a4bf-f00b667101c9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9119ec15-eaaa-4496-90ec-a1ea52a06240"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d7dd051-fbc8-42ea-9c61-02cb8d8ac172"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd3ec9c1-35d6-4bd3-a22c-518a538271b9"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIGamepad"",
            ""id"": ""32908528-1d80-4c69-a69e-566d3d3b6544"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89a58fe2-9127-4c82-81e4-4746078013e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""9f65cf13-fa06-4cfd-8804-587bbc8ad7e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""a8c1d49f-a8ed-4be4-9baa-84d8e0d0035d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9a2f3b2c-2ed8-4088-b1a0-0fee03cf0a70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8275909d-d764-46bb-b6c4-b31cc867c255"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f5f30074-24c6-43dd-9f87-5759d8a12457"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""359f4c8b-27db-4477-b7d0-37f2222a008c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6f9c0ca8-c52a-44e8-a121-4daf23b9c22d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""475f0610-3399-4362-839e-9600ed2a28f9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72d1e48c-72a0-4c85-bd51-5f731decd052"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""JoinActions"",
            ""id"": ""667e052e-d7f1-4198-95ff-ac1b6df42cf7"",
            ""actions"": [
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""41967d51-1de4-42a1-9442-0a8b02ae8a8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da27a8ba-4c60-4cd5-bd0c-9cc36643bb30"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a57fa69-bb03-404e-9980-d2fbc175bb06"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aed0800-d979-4acf-a5b6-82d27fe1d23c"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad
        m_Gamepad = asset.FindActionMap("Gamepad", throwIfNotFound: true);
        m_Gamepad_Slap = m_Gamepad.FindAction("Slap", throwIfNotFound: true);
        m_Gamepad_Move = m_Gamepad.FindAction("Move", throwIfNotFound: true);
        m_Gamepad_Dash = m_Gamepad.FindAction("Dash", throwIfNotFound: true);
        // Keyboard1
        m_Keyboard1 = asset.FindActionMap("Keyboard1", throwIfNotFound: true);
        m_Keyboard1_Slap = m_Keyboard1.FindAction("Slap", throwIfNotFound: true);
        m_Keyboard1_Move = m_Keyboard1.FindAction("Move", throwIfNotFound: true);
        m_Keyboard1_Dash = m_Keyboard1.FindAction("Dash", throwIfNotFound: true);
        // Keyboard2
        m_Keyboard2 = asset.FindActionMap("Keyboard2", throwIfNotFound: true);
        m_Keyboard2_Slap = m_Keyboard2.FindAction("Slap", throwIfNotFound: true);
        m_Keyboard2_Move = m_Keyboard2.FindAction("Move", throwIfNotFound: true);
        m_Keyboard2_Dash = m_Keyboard2.FindAction("Dash", throwIfNotFound: true);
        // UIKeyboard1
        m_UIKeyboard1 = asset.FindActionMap("UIKeyboard1", throwIfNotFound: true);
        m_UIKeyboard1_Navigation = m_UIKeyboard1.FindAction("Navigation", throwIfNotFound: true);
        m_UIKeyboard1_Confirm = m_UIKeyboard1.FindAction("Confirm", throwIfNotFound: true);
        m_UIKeyboard1_Back = m_UIKeyboard1.FindAction("Back", throwIfNotFound: true);
        // UIKeyboard2
        m_UIKeyboard2 = asset.FindActionMap("UIKeyboard2", throwIfNotFound: true);
        m_UIKeyboard2_Navigation = m_UIKeyboard2.FindAction("Navigation", throwIfNotFound: true);
        m_UIKeyboard2_Confirm = m_UIKeyboard2.FindAction("Confirm", throwIfNotFound: true);
        m_UIKeyboard2_Back = m_UIKeyboard2.FindAction("Back", throwIfNotFound: true);
        // UIGamepad
        m_UIGamepad = asset.FindActionMap("UIGamepad", throwIfNotFound: true);
        m_UIGamepad_Navigation = m_UIGamepad.FindAction("Navigation", throwIfNotFound: true);
        m_UIGamepad_Confirm = m_UIGamepad.FindAction("Confirm", throwIfNotFound: true);
        m_UIGamepad_Back = m_UIGamepad.FindAction("Back", throwIfNotFound: true);
        // JoinActions
        m_JoinActions = asset.FindActionMap("JoinActions", throwIfNotFound: true);
        m_JoinActions_Join = m_JoinActions.FindAction("Join", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad
    private readonly InputActionMap m_Gamepad;
    private List<IGamepadActions> m_GamepadActionsCallbackInterfaces = new List<IGamepadActions>();
    private readonly InputAction m_Gamepad_Slap;
    private readonly InputAction m_Gamepad_Move;
    private readonly InputAction m_Gamepad_Dash;
    public struct GamepadActions
    {
        private @PlayerInputScript m_Wrapper;
        public GamepadActions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slap => m_Wrapper.m_Gamepad_Slap;
        public InputAction @Move => m_Wrapper.m_Gamepad_Move;
        public InputAction @Dash => m_Wrapper.m_Gamepad_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Gamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Add(instance);
            @Slap.started += instance.OnSlap;
            @Slap.performed += instance.OnSlap;
            @Slap.canceled += instance.OnSlap;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IGamepadActions instance)
        {
            @Slap.started -= instance.OnSlap;
            @Slap.performed -= instance.OnSlap;
            @Slap.canceled -= instance.OnSlap;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IGamepadActions instance)
        {
            if (m_Wrapper.m_GamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadActions @Gamepad => new GamepadActions(this);

    // Keyboard1
    private readonly InputActionMap m_Keyboard1;
    private List<IKeyboard1Actions> m_Keyboard1ActionsCallbackInterfaces = new List<IKeyboard1Actions>();
    private readonly InputAction m_Keyboard1_Slap;
    private readonly InputAction m_Keyboard1_Move;
    private readonly InputAction m_Keyboard1_Dash;
    public struct Keyboard1Actions
    {
        private @PlayerInputScript m_Wrapper;
        public Keyboard1Actions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slap => m_Wrapper.m_Keyboard1_Slap;
        public InputAction @Move => m_Wrapper.m_Keyboard1_Move;
        public InputAction @Dash => m_Wrapper.m_Keyboard1_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Keyboard1Actions set) { return set.Get(); }
        public void AddCallbacks(IKeyboard1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard1ActionsCallbackInterfaces.Add(instance);
            @Slap.started += instance.OnSlap;
            @Slap.performed += instance.OnSlap;
            @Slap.canceled += instance.OnSlap;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IKeyboard1Actions instance)
        {
            @Slap.started -= instance.OnSlap;
            @Slap.performed -= instance.OnSlap;
            @Slap.canceled -= instance.OnSlap;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IKeyboard1Actions instance)
        {
            if (m_Wrapper.m_Keyboard1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboard1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Keyboard1Actions @Keyboard1 => new Keyboard1Actions(this);

    // Keyboard2
    private readonly InputActionMap m_Keyboard2;
    private List<IKeyboard2Actions> m_Keyboard2ActionsCallbackInterfaces = new List<IKeyboard2Actions>();
    private readonly InputAction m_Keyboard2_Slap;
    private readonly InputAction m_Keyboard2_Move;
    private readonly InputAction m_Keyboard2_Dash;
    public struct Keyboard2Actions
    {
        private @PlayerInputScript m_Wrapper;
        public Keyboard2Actions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slap => m_Wrapper.m_Keyboard2_Slap;
        public InputAction @Move => m_Wrapper.m_Keyboard2_Move;
        public InputAction @Dash => m_Wrapper.m_Keyboard2_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Keyboard2Actions set) { return set.Get(); }
        public void AddCallbacks(IKeyboard2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Keyboard2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Keyboard2ActionsCallbackInterfaces.Add(instance);
            @Slap.started += instance.OnSlap;
            @Slap.performed += instance.OnSlap;
            @Slap.canceled += instance.OnSlap;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IKeyboard2Actions instance)
        {
            @Slap.started -= instance.OnSlap;
            @Slap.performed -= instance.OnSlap;
            @Slap.canceled -= instance.OnSlap;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IKeyboard2Actions instance)
        {
            if (m_Wrapper.m_Keyboard2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboard2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Keyboard2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Keyboard2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Keyboard2Actions @Keyboard2 => new Keyboard2Actions(this);

    // UIKeyboard1
    private readonly InputActionMap m_UIKeyboard1;
    private List<IUIKeyboard1Actions> m_UIKeyboard1ActionsCallbackInterfaces = new List<IUIKeyboard1Actions>();
    private readonly InputAction m_UIKeyboard1_Navigation;
    private readonly InputAction m_UIKeyboard1_Confirm;
    private readonly InputAction m_UIKeyboard1_Back;
    public struct UIKeyboard1Actions
    {
        private @PlayerInputScript m_Wrapper;
        public UIKeyboard1Actions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_UIKeyboard1_Navigation;
        public InputAction @Confirm => m_Wrapper.m_UIKeyboard1_Confirm;
        public InputAction @Back => m_Wrapper.m_UIKeyboard1_Back;
        public InputActionMap Get() { return m_Wrapper.m_UIKeyboard1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIKeyboard1Actions set) { return set.Get(); }
        public void AddCallbacks(IUIKeyboard1Actions instance)
        {
            if (instance == null || m_Wrapper.m_UIKeyboard1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIKeyboard1ActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IUIKeyboard1Actions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IUIKeyboard1Actions instance)
        {
            if (m_Wrapper.m_UIKeyboard1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIKeyboard1Actions instance)
        {
            foreach (var item in m_Wrapper.m_UIKeyboard1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIKeyboard1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIKeyboard1Actions @UIKeyboard1 => new UIKeyboard1Actions(this);

    // UIKeyboard2
    private readonly InputActionMap m_UIKeyboard2;
    private List<IUIKeyboard2Actions> m_UIKeyboard2ActionsCallbackInterfaces = new List<IUIKeyboard2Actions>();
    private readonly InputAction m_UIKeyboard2_Navigation;
    private readonly InputAction m_UIKeyboard2_Confirm;
    private readonly InputAction m_UIKeyboard2_Back;
    public struct UIKeyboard2Actions
    {
        private @PlayerInputScript m_Wrapper;
        public UIKeyboard2Actions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_UIKeyboard2_Navigation;
        public InputAction @Confirm => m_Wrapper.m_UIKeyboard2_Confirm;
        public InputAction @Back => m_Wrapper.m_UIKeyboard2_Back;
        public InputActionMap Get() { return m_Wrapper.m_UIKeyboard2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIKeyboard2Actions set) { return set.Get(); }
        public void AddCallbacks(IUIKeyboard2Actions instance)
        {
            if (instance == null || m_Wrapper.m_UIKeyboard2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIKeyboard2ActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IUIKeyboard2Actions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IUIKeyboard2Actions instance)
        {
            if (m_Wrapper.m_UIKeyboard2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIKeyboard2Actions instance)
        {
            foreach (var item in m_Wrapper.m_UIKeyboard2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIKeyboard2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIKeyboard2Actions @UIKeyboard2 => new UIKeyboard2Actions(this);

    // UIGamepad
    private readonly InputActionMap m_UIGamepad;
    private List<IUIGamepadActions> m_UIGamepadActionsCallbackInterfaces = new List<IUIGamepadActions>();
    private readonly InputAction m_UIGamepad_Navigation;
    private readonly InputAction m_UIGamepad_Confirm;
    private readonly InputAction m_UIGamepad_Back;
    public struct UIGamepadActions
    {
        private @PlayerInputScript m_Wrapper;
        public UIGamepadActions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_UIGamepad_Navigation;
        public InputAction @Confirm => m_Wrapper.m_UIGamepad_Confirm;
        public InputAction @Back => m_Wrapper.m_UIGamepad_Back;
        public InputActionMap Get() { return m_Wrapper.m_UIGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIGamepadActions set) { return set.Get(); }
        public void AddCallbacks(IUIGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_UIGamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIGamepadActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IUIGamepadActions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IUIGamepadActions instance)
        {
            if (m_Wrapper.m_UIGamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_UIGamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIGamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIGamepadActions @UIGamepad => new UIGamepadActions(this);

    // JoinActions
    private readonly InputActionMap m_JoinActions;
    private List<IJoinActionsActions> m_JoinActionsActionsCallbackInterfaces = new List<IJoinActionsActions>();
    private readonly InputAction m_JoinActions_Join;
    public struct JoinActionsActions
    {
        private @PlayerInputScript m_Wrapper;
        public JoinActionsActions(@PlayerInputScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Join => m_Wrapper.m_JoinActions_Join;
        public InputActionMap Get() { return m_Wrapper.m_JoinActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoinActionsActions set) { return set.Get(); }
        public void AddCallbacks(IJoinActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_JoinActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoinActionsActionsCallbackInterfaces.Add(instance);
            @Join.started += instance.OnJoin;
            @Join.performed += instance.OnJoin;
            @Join.canceled += instance.OnJoin;
        }

        private void UnregisterCallbacks(IJoinActionsActions instance)
        {
            @Join.started -= instance.OnJoin;
            @Join.performed -= instance.OnJoin;
            @Join.canceled -= instance.OnJoin;
        }

        public void RemoveCallbacks(IJoinActionsActions instance)
        {
            if (m_Wrapper.m_JoinActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoinActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_JoinActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoinActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoinActionsActions @JoinActions => new JoinActionsActions(this);
    public interface IGamepadActions
    {
        void OnSlap(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IKeyboard1Actions
    {
        void OnSlap(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IKeyboard2Actions
    {
        void OnSlap(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IUIKeyboard1Actions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IUIKeyboard2Actions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IUIGamepadActions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IJoinActionsActions
    {
        void OnJoin(InputAction.CallbackContext context);
    }
}
